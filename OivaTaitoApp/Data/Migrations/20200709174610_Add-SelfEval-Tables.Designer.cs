// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OivaTaitoApp.Data;

namespace OivaTaitoApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200709174610_Add-SelfEval-Tables")]
    partial class AddSelfEvalTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GoogleId")
                        .HasColumnType("int")
                        .HasMaxLength(21);

                    b.HasKey("Id");

                    b.HasIndex("GoogleId")
                        .IsUnique();

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("QuestionSetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Content = "Perehdyn opiskelusuunnitelmani tavoitteisiin",
                            Identifier = "A",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 2,
                            Content = "Asetan työskentelylleni aikataulutavoitteita",
                            Identifier = "B",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 3,
                            Content = "Osaan suunnitella ja aikatauluttaa opintojani",
                            Identifier = "C",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 4,
                            Content = "Saan työni valmiiksi aikataulussa",
                            Identifier = "D",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 5,
                            Content = "Pystyn selviytymään useasta yhtäaikaisesta opiskelutehtävästä ajallaan",
                            Identifier = "E",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 6,
                            Content = "Haluan oppia oman alani asiantuntijaksi",
                            Identifier = "F",
                            QuestionSetId = 1
                        },
                        new
                        {
                            Id = 7,
                            Content = "Osaan käyttää itselleni sopivimpia työskentelymuotoja",
                            Identifier = "A",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 8,
                            Content = "Keskityn oppimiseni kannalta tärkeimpiin asioihin",
                            Identifier = "B",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 9,
                            Content = "Pystyn suunnitelmalliseen ja tavoitteelliseen työskentelyyn",
                            Identifier = "C",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 10,
                            Content = "Osaan työskennellä joustavasti muuttuvissa tilanteissa",
                            Identifier = "D",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 11,
                            Content = "Pystyn itsenäiseen kriittiseen ajatteluun",
                            Identifier = "E",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 12,
                            Content = "Pystyn tekemään itsenäisiä päätöksiä",
                            Identifier = "F",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 13,
                            Content = "Pystyn suoriutumaan alani käytännön työtehtävistä",
                            Identifier = "G",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 14,
                            Content = "Osaan arvioida oman toimintani vaikutuksia",
                            Identifier = "H",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 15,
                            Content = "Siedän haasteita ja muutoksia työskentelyssäni",
                            Identifier = "I",
                            QuestionSetId = 2
                        },
                        new
                        {
                            Id = 16,
                            Content = "Työskentelen omaa alaani kunnioittaen ja olen rehellinen",
                            Identifier = "A",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 17,
                            Content = "Ymmärrän oman alani eettiset periaatteet",
                            Identifier = "B",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 18,
                            Content = "Otan vastuun omasta työstäni",
                            Identifier = "C",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 19,
                            Content = "Huomatessani työhöni/työyhteisööni vaikuttavia epäkohtia, pyrin korjaamaan niitä",
                            Identifier = "D",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 20,
                            Content = "Työyhteisöni voi luottaa, että teen työni kunnolla",
                            Identifier = "E",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 21,
                            Content = "Noudatan yhteisiä pelisääntöjä ja sopimuksia",
                            Identifier = "F",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 22,
                            Content = "Osaan tehdä työni tehokkaasti huomioiden erilaisia näkökulmia",
                            Identifier = "G",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 23,
                            Content = "Pystyn arvioimaan oman osaamiseni kehittymistä",
                            Identifier = "H",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 24,
                            Content = "Olen valmis kehittämään itseäni saamani palautteen kautta",
                            Identifier = "I",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 25,
                            Content = "En lannistu helposti",
                            Identifier = "J",
                            QuestionSetId = 3
                        },
                        new
                        {
                            Id = 26,
                            Content = "Osaan etsiä omaan alaani liittyvää luotettavaa tietoa",
                            Identifier = "A",
                            QuestionSetId = 4
                        },
                        new
                        {
                            Id = 27,
                            Content = "Ymmärrän tekijänoikeudet ja noudatan niitä",
                            Identifier = "B",
                            QuestionSetId = 4
                        },
                        new
                        {
                            Id = 28,
                            Content = "Osaan analysoida ja soveltaa alaani liittyvää tieteellistä tietoa",
                            Identifier = "C",
                            QuestionSetId = 4
                        },
                        new
                        {
                            Id = 29,
                            Content = "Osaan arvioida kriittisesti lähteiden luotettavuutta.",
                            Identifier = "D",
                            QuestionSetId = 4
                        },
                        new
                        {
                            Id = 30,
                            Content = "Tunnen oman alani tärkeimmät toimijat ja seuraan alani kehitystä",
                            Identifier = "E",
                            QuestionSetId = 4
                        },
                        new
                        {
                            Id = 31,
                            Content = "Minulla on hyvät vuorovaikutustaidot",
                            Identifier = "A",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 32,
                            Content = "Osaan työskennellä asiakaslähtöisesti",
                            Identifier = "B",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 33,
                            Content = "Olen empaattinen ja huomioin työyhteisöni jäsenet",
                            Identifier = "C",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 34,
                            Content = "Osaan antaa kehittävää palautetta",
                            Identifier = "D",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 35,
                            Content = "Olen valmis jakamaan osaamistani ja ideoitani tiimissä",
                            Identifier = "E",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 36,
                            Content = "Huolehdin, että tiimin työskentely on tavoitteellista",
                            Identifier = "F",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 37,
                            Content = "Otan huomioon kriittisen ja kehittävän palautteen",
                            Identifier = "G",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 38,
                            Content = "Olen tasapuolinen kaikkia tiimini jäseniä kohtaan",
                            Identifier = "H",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 39,
                            Content = "Kannustan muita tiimini jäseniä yhteisten tavoitteiden saavuttamiseksi",
                            Identifier = "I",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 40,
                            Content = "Pyrin ratkaisemaan tiimityöskentelyyn liittyviä haasteita",
                            Identifier = "J",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 41,
                            Content = "Autan muita tarvittaessa",
                            Identifier = "K",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 42,
                            Content = "Osaan toimia yhteistyössä muiden alojen ammattilaisten kanssa",
                            Identifier = "L",
                            QuestionSetId = 5
                        },
                        new
                        {
                            Id = 43,
                            Content = "Osaan esitellä työni tuloksia ymmärrettävästi",
                            Identifier = "A",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 44,
                            Content = "Osaan kuvata omaa osaamistani monipuolisesti",
                            Identifier = "B",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 45,
                            Content = "Osaan viestiä ammatillisesti vieraalla kielellä (a-kieli)",
                            Identifier = "C",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 46,
                            Content = "Osaan viestiä ammatillisesti toisella kotimaisella kielellä",
                            Identifier = "D",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 47,
                            Content = "Osaan esiintyä vaikuttavasti",
                            Identifier = "E",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 48,
                            Content = "Uskallan pitää puoliani sekä perustella näkökantaani",
                            Identifier = "F",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 49,
                            Content = "Osaan ilmaista itseäni kirjallisesti",
                            Identifier = "G",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 50,
                            Content = "Osaan suunnitella ja toteuttaa viestintää eri viestintävälineitä hyödyntämällä",
                            Identifier = "H",
                            QuestionSetId = 6
                        },
                        new
                        {
                            Id = 51,
                            Content = "Huomatessani ongelmia pyrin löytämään niihin ratkaisuvaihtoehtoja",
                            Identifier = "A",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 52,
                            Content = "Olen kriittinen pohtiessani jo olemassa olevien ratkaisujen toimivuutta",
                            Identifier = "B",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 53,
                            Content = "Osaan ratkaista ammatillisia ongelmia",
                            Identifier = "C",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 54,
                            Content = "Osaan hyödyntää aiemmin opittua uudessa tilanteessa",
                            Identifier = "D",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 55,
                            Content = "Olen kekseliäs ja kehitän uusia ideoita",
                            Identifier = "E",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 56,
                            Content = "Osaan suunnitella ideoistani toimintakelpoisia ratkaisuja",
                            Identifier = "F",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 57,
                            Content = "Tunnistan mahdollisuuksia, joissa voin laajentaa ammatillisen toimintani rajoja",
                            Identifier = "G",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 58,
                            Content = "Haluan kehittää omaa alaani",
                            Identifier = "H",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 59,
                            Content = "Haluan olla innovoimassa oman alani kehittymistä yhteistyössä muiden alojen kanssa",
                            Identifier = "I",
                            QuestionSetId = 7
                        },
                        new
                        {
                            Id = 60,
                            Content = "Uskon omaan tekemiseeni ja uskallan kokeilla vaihtoehtoisia toimintatapoja",
                            Identifier = "A",
                            QuestionSetId = 8
                        },
                        new
                        {
                            Id = 61,
                            Content = "Luotan omaan ammatilliseen osaamiseeni.",
                            Identifier = "B",
                            QuestionSetId = 8
                        },
                        new
                        {
                            Id = 62,
                            Content = "Tunnistan alaani liittyviä riskejä",
                            Identifier = "C",
                            QuestionSetId = 8
                        },
                        new
                        {
                            Id = 63,
                            Content = "Toimin alaani liittyvien riskien hallitsemiseksi",
                            Identifier = "D",
                            QuestionSetId = 8
                        });
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.QuestionCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("QuestionCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identifier = "A",
                            Title = "Oman osaamisen kehittäminen ja johtaminen"
                        },
                        new
                        {
                            Id = 2,
                            Identifier = "B",
                            Title = "Tiedon hankinta ja analysointi"
                        },
                        new
                        {
                            Id = 3,
                            Identifier = "C",
                            Title = "Yhteistyötaidot ja viestintä"
                        },
                        new
                        {
                            Id = 4,
                            Identifier = "D",
                            Title = "Innovointi ja luova ongelmanratkaisu"
                        },
                        new
                        {
                            Id = 5,
                            Identifier = "E",
                            Title = "Tulevaisuustaidot: urasuunnittelu, yrittäjyys, digitaalisuus, monikulttuurisuus, kestävä kehitys"
                        },
                        new
                        {
                            Id = 6,
                            Identifier = "F",
                            Title = "Itseluottamus ja hyvinvointi työssä"
                        });
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.QuestionSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Identifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<int>("QuestionCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("QuestionCategoryId");

                    b.ToTable("QuestionSets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Identifier = "1",
                            QuestionCategoryId = 1,
                            Title = "Tavoitteellinen työskentely ja organisointitaidot"
                        },
                        new
                        {
                            Id = 2,
                            Identifier = "2",
                            QuestionCategoryId = 1,
                            Title = "Työskentelytaidot"
                        },
                        new
                        {
                            Id = 3,
                            Identifier = "3",
                            QuestionCategoryId = 1,
                            Title = "Oman työskentelyn johtaminen"
                        },
                        new
                        {
                            Id = 4,
                            Identifier = "1",
                            QuestionCategoryId = 2,
                            Title = "Tiedon hankinta ja analysointi"
                        },
                        new
                        {
                            Id = 5,
                            Identifier = "1",
                            QuestionCategoryId = 3,
                            Title = "Yhteistyötaidot"
                        },
                        new
                        {
                            Id = 6,
                            Identifier = "2",
                            QuestionCategoryId = 3,
                            Title = "Viestintä- ja kommunikaatiotaidot"
                        },
                        new
                        {
                            Id = 7,
                            Identifier = "1",
                            QuestionCategoryId = 4,
                            Title = "Ongelmanratkaisutaidot ja innovointi"
                        },
                        new
                        {
                            Id = 8,
                            Identifier = "2",
                            QuestionCategoryId = 4,
                            Title = "Riskinottokyky / Riskien hallinta"
                        },
                        new
                        {
                            Id = 9,
                            Identifier = "1",
                            QuestionCategoryId = 5,
                            Title = "Tulevaisuustaidot"
                        },
                        new
                        {
                            Id = 10,
                            Identifier = "2",
                            QuestionCategoryId = 5,
                            Title = "Urataidot"
                        },
                        new
                        {
                            Id = 11,
                            Identifier = "3",
                            QuestionCategoryId = 5,
                            Title = "Digitaaliset työskentelytaidot"
                        },
                        new
                        {
                            Id = 12,
                            Identifier = "4",
                            QuestionCategoryId = 5,
                            Title = "Kansainvälisyys"
                        });
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.Result", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Answer")
                        .HasColumnType("int");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Results");
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.SelfEvalResultRow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ResultId")
                        .HasColumnType("int");

                    b.Property<int>("SelfEvaluationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ResultId");

                    b.HasIndex("SelfEvaluationId");

                    b.ToTable("SelfEvalResultRows");
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.SelfEvaluation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EvaluatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EvaluatorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EvaluatorId");

                    b.ToTable("SelfEvaluations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.Question", b =>
                {
                    b.HasOne("OivaTaitoApp.Data.Models.QuestionSet", "QuestionSet")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.QuestionSet", b =>
                {
                    b.HasOne("OivaTaitoApp.Data.Models.QuestionCategory", "QuestionCategory")
                        .WithMany("QuestionSets")
                        .HasForeignKey("QuestionCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.Result", b =>
                {
                    b.HasOne("OivaTaitoApp.Data.Models.Question", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.SelfEvalResultRow", b =>
                {
                    b.HasOne("OivaTaitoApp.Data.Models.Result", "Result")
                        .WithMany()
                        .HasForeignKey("ResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OivaTaitoApp.Data.Models.SelfEvaluation", "SelfEvaluation")
                        .WithMany()
                        .HasForeignKey("SelfEvaluationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OivaTaitoApp.Data.Models.SelfEvaluation", b =>
                {
                    b.HasOne("OivaTaitoApp.Data.Models.AppUser", "Evaluator")
                        .WithMany()
                        .HasForeignKey("EvaluatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
