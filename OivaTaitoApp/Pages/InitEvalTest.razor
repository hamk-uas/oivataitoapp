@using OivaTaitoApp.Data.Models
@using OivaTaitoApp.Services
@using OivaTaitoApp.Userid
@using OivaTaitoApp.Components
@using System.Security.Claims
@using Microsoft.AspNetCore.Http
@using System.Threading.Tasks
@inject NavigationManager NavManager
@inject NavigationManager UriHelper
@inject GlobalId globalId
@inject IHttpContextAccessor _httpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inherits OwningComponentBase<EvaluationService>
@page "/initeval-test/{categoryIndex:int}"
@inject IJSRuntime JSRuntime

<AuthorizeView>
    <Authorized Context="Auth">
        <div class="container">
            @if (showLoader)
            {
                <center style="padding-top: 60px;">
                    <h1>Ladataan tietoja...</h1>
                    <div class="spinner-border" role="status">
                        <span class="sr-only">Ladataan tietoja...</span>
                    </div>
                </center>
            }
            else
            {
                @if (showModal)
                {
                    <div class="modal fade show" data-backdrop="static" style="display:block" aria-modal="true" role="dialog" @onclick="@ModalCancel">
                        <div class="modal-dialog modal-xl modal-dialog-scrollable" @onclick:stopPropagation="true">
                            <div class="modal-content">

                                <!-- Modal Header -->
                                <div class="modal-header" tabindex="0">
                                    <h4 class="modal-title" tabindex="0">Palaute</h4>
                                    <button type="button" class="close" @onclick="@ModalCancel">&times;</button>
                                </div>

                                <!-- Modal body -->
                                <div class="modal-body">
                                    <p>
                                        @if (average > 0)
                                        {
                                            <h3 tabindex="0">Keskiarvosi on: @averageString</h3>
                                        }
                                        else
                                        {
                                            <h3></h3>
                                        }

                                        @if (feedBack != null)
                                        {
                                            <h4 tabindex="0">@feedBack.FeedbackContent</h4>
                                        }
                                        else
                                        {
                                        <p tabindex="0">Feedback not found!</p>
                                    }
                                        </p>
                                        <button type="button" class="btn btn-primary" @onclick="@ShowImprovement">Näytä kehitysehdotus</button>
                                        <div class="improvement">
                                            @if (showImprovement == true && improvement != null)
                                            {
                                                <div class="improvement-content">
                                                    <p>@improvement.ImprovementContent</p>
                                                </div>

                                                <!-- Skip link for accessibility -->
                                                @if (showProfileButton)
                                                {
                                                    <button class="sr-only sr-only-focusable" @onclick=@ToProfile>Profiiliin</button>
                                                }
                                                else
                                                {
                                                    <button class="sr-only sr-only-focusable" @onclick="@ModalCancel">Seuraava</button>
                                                }

                                                <div class="improvement-video">
                                                    @if (improvement.ImprovementVideoUrl != null && !string.IsNullOrEmpty(improvement.ImprovementVideoUrl))
                                                    {
                                                        <center><iframe class="iframe-container" src="@improvement.ImprovementVideoUrl" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe></center>
                                                    }
                                                    else
                                                    {
                                                        <p>Video not found!</p>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                    @if (showProfileButton)
                                    {
                                        <!-- Modal footer -->
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-primary" @onclick=@ToProfile>Profiiliin</button>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="modal-footer">
                                            <button type="button" class="btn btn-primary" @onclick=@ModalCancel>Seuraava</button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }


                @if (allCategories != null)
                {
                    <form>
                        <div class="table table-xl">
                            <div class="q-card-top">
                                <h3 class="category-title"> @Category.Identifier . @Category.Title</h3>
                                <div><h5 class="set-title" style="font-size: 22px;">@set.Identifier / @allSets : @set.Title</h5></div>

                                <ul class="points-list">
                                    <li><span class="points-list-first-row">5</span> = aina - erinomaiset taidot - paljon kokemusta</li>
                                    <li><span class="points-list-second-row">4</span> = yleensä - kiitettävät taidot - hyvin kokemusta</li>
                                    <li><span class="points-list-third-row">3</span> = usein - hyvät taidot - jonkin verran kokemusta</li>
                                    <li><span class="points-list-fourth-row">2</span> = joskus - tyydyttävät taidot - vähän kokemusta</li>
                                    <li><span class="points-list-fifth-row">1</span> = en koskaan - välttävät taidot - ei kokemusta</li>
                                </ul>
                                @if (progress != "0%")
                                {
                                    <center>
                                        <span>Testiä suoritettu:</span>
                                    </center>
                                    <center>
                                        <div class="progress" style="max-width: 400px; border-radius: 30px;">
                                            <div class="progress-bar progress-bar-info" role="progressbar" aria-valuenow="@progress"
                                                 aria-valuemin="0" aria-valuemax="100" style="width: @progress">
                                                @progress
                                            </div>
                                        </div>
                                    </center>
                                }

                            </div>
                            @foreach (Question item in @set.Questions)
                            {
                                <div class="q-container">
                                    <div class="row justify-content-center" tabindex="0"><div class="q-item">@item.Identifier : @item.Content</div></div>
                                    <div class="row">
                                        <div class="col">
                                            <input id="slidertext" name="slider-label" class="label" value="@sliderValueDict[@item.Id]" />
                                        </div>
                                    </div>
                                    <div class="row">
                                        <div class="col" style="padding: 0px;">
                                            <input type="range" class="slider" name="slider" step="0.5" min="1" max="5"
                                                   @oninput="@(e => SliderChange(item.Id, e.Value.ToString(), set.Id))"
                                                   @bind-value="@sliderValueDict[@item.Id]">
                                            <div class="d-flex">
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                                <span class="tick-mark">I</span>
                                            </div>
                                            <div class="d-flex">
                                                <span class="tick">1</span>
                                                <span class="tick-half">1,5</span>
                                                <span class="tick">2</span>
                                                <span class="tick-half">2,5</span>
                                                <span class="tick">3</span>
                                                <span class="tick-half">3,5</span>
                                                <span class="tick">4</span>
                                                <span class="tick-half">4,5</span>
                                                <span class="tick">5</span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                            @if (categoryIndex + 1 < allCategories.Count && setIndex + 1 <= setList.Count)
                            {
                                buttonVar = "Seuraava";
                            }
                            else
                            {
                                buttonVar = "Lähetä";
                            }
                            @if (Category.Id == 1 && set.Id == 1)
                            {
                                previousButtonColor = "grey";
                                <style>
                                    #previous-page {
                                        pointer-events: none;
                                    }
                                </style>
                            }
                            else
                            {
                                previousButtonColor = "#fff";
                            }
                            <br />
                            <div class="row justify-content-center">
                                <nav aria-label="...">
                                    <ul class="pagination">
                                        <li>
                                            <button class="ml-md-auto btn btn-primary" type="button" style="cursor: pointer; margin-right: 15px; color: @previousButtonColor;" @onclick="@OnPrevious"><i class="fa fa-angle-left"></i> Edellinen</button>
                                        </li>
                                        <li>
                                            <button class="ml-md-auto btn btn-primary" type="button" style="cursor: pointer; margin-left: 15px; color: #fff; " @onclick="@(e => @OnSubmit(set.Id))">@buttonVar <i class="fa fa-angle-right"></i></button>
                                        </li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                    </form>
                }
            }
        </div>
    </Authorized>
    <NotAuthorized>
        <NotAuthorizedComponent />
    </NotAuthorized>

</AuthorizeView>
<style>
    body {
             background-color: @CategoryColor;
         }
</style>
@code {
    [Parameter]
    public int categoryIndex { get; set; }

    string CategoryColor;
    private int allSets;

    private bool showLoader;

    private string progress;
    private int answered;
    private int allQuestions;

    // this controls the binding of values to the sliders and from the sliders
    private Dictionary<int, float> sliderValueDict = new Dictionary<int, float>();

    // This is used for collecting all slider values. Objects are then used for counting average score for each qiestion set.
    public class SliderSelection
    {
        public int _setId { get; set; }
        public float _answer { get; set; }
        public int _questionId { get; set; }
    }

    // selectedSliderValues list is used for adding slider values to local storage and getting them from local storage and for counting average score per question set
    private List<SliderSelection> selectedSliderValues = new List<SliderSelection>();

    float average = 0;
    string averageString = "";
    private List<float> averageList = new List<float>();

    string buttonVar = "Seuraava";
    string previousButtonColor;

    int setIndex = 0;

    private List<QuestionSet> setList;

    private List<QuestionCategory> allCategories;

    QuestionCategory Category;

    QuestionSet set;

    EvalFeedback feedBack;

    // List of SelfEvalResult objects to send to database
    private List<SelfEvalResult> resultList = new List<SelfEvalResult>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // starting values when page is first rendered
            int categoryIndex = 0;
            showLoader = false;
            int setIndex = 0;
            allCategories = Service.GetQuestionCategories();
            Category = allCategories[categoryIndex];
            setList = allCategories[categoryIndex].QuestionSets;
            set = setList[setIndex];
            CategoryColor = "#" + Category.ColorHex;


            foreach (QuestionCategory category in allCategories)
            {
                foreach (QuestionSet set in category.QuestionSets)
                {
                    foreach (Question question in set.Questions)
                    {
                        string qId = await localStorage.GetItemAsStringAsync(question.Id.ToString());
                        // check if there are slider values already in the localstorage
                        if (!string.IsNullOrEmpty(qId))
                        {
                            string _id = question.Id.ToString();
                            string val = await localStorage.GetItemAsStringAsync(_id);
                            float floatVal = (float)Convert.ToDouble(val);
                            sliderValueDict.Add(question.Id, floatVal);
                            selectedSliderValues.Add(new SliderSelection { _answer = floatVal, _questionId = question.Id, _setId = set.Id });
                        }
                        else
                        {
                            sliderValueDict.Add(question.Id, 0);
                        }

                        allQuestions++;
                    }
                }
            }

            progress = "0%";
            allSets = setList.Count();

            StateHasChanged();
        }
    }

    async Task ClearLocalStorage()
    {
        await localStorage.ClearAsync();
    }

    private async void OnSubmit(int questionsetId)
    {
        // Here we count how many answers are given for current question set
        // including the ones in local storage
        int currentSetAnswerCount = selectedSliderValues.Where(sel => sel._setId == questionsetId).Count();

        // Check if the current count of answers matches the questions in the current set
        if (currentSetAnswerCount >= set.Questions.Count())
        {
            // use list of objects to count average score
            foreach (SliderSelection s in selectedSliderValues)
            {
                if (s._setId == questionsetId)
                {
                    averageList.Add(s._answer);
                }
            }

            if (averageList.Count() > 0)
            {
                average = averageList.Average();
                decimal decimalAverage = Math.Round((decimal)average, 1);
                average = (float)decimalAverage;
                averageString = (decimalAverage.ToString("#.##"));
            }
            else
            {
                average = 0;
                averageString = "0.00";
            }

            // print feedback
            feedBack = Service.GetFeedback(questionsetId, average);

            int userId = Service.GetUserId(globalId.GetGlobalId());

            showImprovement = false;

            GetImprovement();

            // Show one set at a time and go to the next category when sets end

            // check if there are question sets remaining in current category
            if (setIndex >= 0 && setIndex + 1 < setList.Count)
            {
                setIndex = setIndex + 1;
                set = setList[setIndex];
                ModalShow();

                averageList.Clear();
            }
            // go to next question category if there are no more question sets in current category and
            // there are more categories after current category
            else if (categoryIndex + 1 < allCategories.Count && setIndex >= 0 && setIndex + 1 <= setList.Count
                && allCategories[categoryIndex + 1].QuestionSets != null && allCategories[categoryIndex + 1].QuestionSets.Count > 0)
            {
                ModalShow();
                categoryIndex = categoryIndex + 1;
                setIndex = 0;
                Category = allCategories[categoryIndex];
                setList = allCategories[categoryIndex].QuestionSets;
                set = setList[setIndex];
                CategoryColor = "#" + Category.ColorHex;
                allSets = setList.Count();
            }
            // if all categories are done, show profile button and navigate to profile when modal is closed
            else
            {
                ModalShow();
                Service.CreateSelfEvaluation(resultList, userId);
                Service.SetInitEvalCompleted(userId);
                showProfileButton = true;
                await ClearLocalStorage();
            }

            ScrollToTop();

            answered = sliderValueDict.Where(i => i.Value > 0).Count();
            // count progress
            progress = ((double)answered / (double)allQuestions).ToString("0%");
        }
        else
        {
            Alert();
        }
    }
    // function for going back to previous set if there are any. If not, then go back to the last set of previous category
    private void OnPrevious()
    {
        if (Category.Id == 1 && set.Id == 1)
        {

        }
        else
        {
            if (setIndex - 1 >= 0)
            {
                setIndex = setIndex - 1;
                set = setList[setIndex];
                ScrollToTop();
            }
            else
            {
                categoryIndex--;
                Category = allCategories[categoryIndex];
                setList = Category.QuestionSets;
                set = setList[setList.Count - 1];
                setIndex = setList.Count - 1;
                ScrollToTop();
            }
            CategoryColor = "#" + Category.ColorHex;
            allSets = setList.Count();

        }
    }

    // collect slider values and remove duplicates
    private async Task SliderChange(int QuestionId, string Value, int setId)
    {
        float fValue = float.Parse(Value);
        sliderValueDict[QuestionId] = fValue;

        // add result to resultlist and remove dublicates
        if (resultList.Any(i => i.QuestionId == QuestionId))
        {
            var itemToRemove = resultList.Where(item => item.QuestionId == QuestionId).FirstOrDefault();
            resultList.Remove(itemToRemove);
            resultList.Add(new SelfEvalResult() { Answer = fValue, QuestionId = QuestionId });
        }
        else
        {
            resultList.Add(new SelfEvalResult() { Answer = fValue, QuestionId = QuestionId });
        }
        // add to list of object to count average score per question set (in OnSubmit function) and to check if every question in question set is answered
        if (selectedSliderValues.Any(a => a._questionId == QuestionId))
        {
            var iToRemove = selectedSliderValues.Where(item => item._questionId == QuestionId).FirstOrDefault();
            selectedSliderValues.Remove(iToRemove);
            selectedSliderValues.Add(new SliderSelection() { _answer = fValue, _setId = setId, _questionId = QuestionId });
        }
        else
        {
            selectedSliderValues.Add(new SliderSelection() { _answer = fValue, _setId = setId, _questionId = QuestionId });
        }
        // set slider values to localstorage
        await SetToLocalStorage(QuestionId, fValue);
    }

    async Task SetToLocalStorage(int QuestionId, float Value)
    {
        await localStorage.SetItemAsync(QuestionId.ToString(), Value.ToString());
    }

    async void ScrollToTop()
    {
        await JSRuntime.InvokeVoidAsync("scrollToTop");
    }

    // alert for invalid radio button selections
    async void Alert()
    {
        await JSRuntime.InvokeVoidAsync("AlertFunction");
    }

    // popup functions
    bool showModal = false;
    bool showProfileButton = false;

    void ModalShow() => showModal = true;
    void ModalCancel()
    {
        averageList.Clear();
        showModal = false;
        if (showProfileButton)
        {
            CategoryColor = "#ffff";
            showLoader = true;
            NavManager.NavigateTo("/results");
        }
    }
    // navigate to profile page
    void ToProfile()
    {
        ModalCancel();
    }

    // evaluation improvement functions
    private EvalImprovement improvement = new EvalImprovement();
    bool showImprovement = false;

    void ShowImprovement()
    {
        if (!showImprovement)
        {
            showImprovement = true;
        }
        else
        {
            showImprovement = false;
        }
    }

    void GetImprovement()
    {
        improvement = Service.GetImprovement(set.Id);
    }

}